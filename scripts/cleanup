#!/bin/bash

# System Cleanup Script
# Cleans temporary files and optimizes system

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Clean up temporary files and optimize system"
    echo
    echo "Options:"
    echo "  -d, --dry-run    Show what would be cleaned without actually doing it"
    echo "  -v, --verbose    Show detailed output"
    echo "  -h, --help       Show this help message"
    echo
    echo "Areas cleaned:"
    echo "  - Temporary files (/tmp, ~/.cache)"
    echo "  - System logs (older than 7 days)"
    echo "  - Package manager cache"
    echo "  - Browser cache (if safe to do so)"
}

DRY_RUN=false
VERBOSE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

log() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[INFO]${NC} $1"
    fi
}

run_command() {
    local cmd="$1"
    local desc="$2"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${YELLOW}[DRY RUN]${NC} Would run: $cmd"
        return
    fi
    
    log "$desc"
    if eval "$cmd" 2>/dev/null; then
        echo -e "${GREEN}✓${NC} $desc"
    else
        echo -e "${RED}✗${NC} Failed: $desc"
    fi
}

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}         SYSTEM CLEANUP${NC}"
echo -e "${BLUE}======================================${NC}"
echo

if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}DRY RUN MODE - No changes will be made${NC}"
    echo
fi

# Clean temporary files
echo -e "${YELLOW}Cleaning temporary files...${NC}"
run_command "find /tmp -type f -atime +7 -delete 2>/dev/null || true" "Remove old files from /tmp"
run_command "find ~/.cache -type f -atime +30 -delete 2>/dev/null || true" "Remove old cache files"

# Clean system logs (if running as root or with sudo)
if [ "$EUID" -eq 0 ] || sudo -n true 2>/dev/null; then
    echo -e "${YELLOW}Cleaning system logs...${NC}"
    run_command "find /var/log -name '*.log' -type f -mtime +7 -delete 2>/dev/null || true" "Remove old log files"
    run_command "journalctl --vacuum-time=7d 2>/dev/null || true" "Clean systemd journal"
fi

# Clean package manager cache
echo -e "${YELLOW}Cleaning package caches...${NC}"
if command -v apt-get >/dev/null 2>&1; then
    run_command "sudo apt-get clean 2>/dev/null || true" "Clean APT cache"
    run_command "sudo apt-get autoremove -y 2>/dev/null || true" "Remove unused packages"
fi

if command -v yum >/dev/null 2>&1; then
    run_command "sudo yum clean all 2>/dev/null || true" "Clean YUM cache"
fi

if command -v dnf >/dev/null 2>&1; then
    run_command "sudo dnf clean all 2>/dev/null || true" "Clean DNF cache"
fi

if command -v brew >/dev/null 2>&1; then
    run_command "brew cleanup 2>/dev/null || true" "Clean Homebrew cache"
fi

# Clean npm cache if available
if command -v npm >/dev/null 2>&1; then
    run_command "npm cache clean --force 2>/dev/null || true" "Clean npm cache"
fi

# Clean pip cache if available
if command -v pip >/dev/null 2>&1; then
    run_command "pip cache purge 2>/dev/null || true" "Clean pip cache"
fi

echo
echo -e "${GREEN}Cleanup completed!${NC}"

# Show disk usage summary
echo -e "${YELLOW}Current disk usage:${NC}"
df -h | head -5

echo -e "${BLUE}======================================${NC}"