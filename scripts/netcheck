#!/bin/bash

# Network Connectivity Checker
# Tests network connectivity and displays network status

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 [OPTIONS] [HOST]"
    echo "Check network connectivity and status"
    echo
    echo "Arguments:"
    echo "  HOST         Host to test connectivity (default: google.com)"
    echo
    echo "Options:"
    echo "  -p, --ping       Only perform ping test"
    echo "  -d, --dns        Only perform DNS lookup test"
    echo "  -s, --speed      Test internet speed (requires speedtest-cli)"
    echo "  -v, --verbose    Show detailed output"
    echo "  -h, --help       Show this help message"
    echo
    echo "Examples:"
    echo "  $0                    # Test connectivity to google.com"
    echo "  $0 github.com         # Test connectivity to github.com"
    echo "  $0 -p 8.8.8.8         # Only ping Google DNS"
    echo "  $0 -s                 # Include speed test"
}

PING_ONLY=false
DNS_ONLY=false
SPEED_TEST=false
VERBOSE=false
HOST="google.com"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--ping)
            PING_ONLY=true
            shift
            ;;
        -d|--dns)
            DNS_ONLY=true
            shift
            ;;
        -s|--speed)
            SPEED_TEST=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            HOST="$1"
            shift
            ;;
    esac
done

log() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[INFO]${NC} $1"
    fi
}

test_ping() {
    local host="$1"
    echo -e "${YELLOW}Testing ping connectivity to $host...${NC}"
    
    if ping -c 4 -W 5 "$host" >/dev/null 2>&1; then
        # Get ping statistics
        ping_stats=$(ping -c 4 -W 5 "$host" 2>/dev/null | tail -2)
        echo -e "${GREEN}✓${NC} Ping test successful"
        if [ "$VERBOSE" = true ]; then
            echo "$ping_stats"
        fi
        return 0
    else
        echo -e "${RED}✗${NC} Ping test failed"
        return 1
    fi
}

test_dns() {
    local host="$1"
    echo -e "${YELLOW}Testing DNS resolution for $host...${NC}"
    
    if nslookup "$host" >/dev/null 2>&1; then
        ip_addr=$(nslookup "$host" 2>/dev/null | grep "Address:" | tail -1 | awk '{print $2}')
        echo -e "${GREEN}✓${NC} DNS resolution successful"
        if [ "$VERBOSE" = true ] && [ -n "$ip_addr" ]; then
            echo "  Resolved to: $ip_addr"
        fi
        return 0
    elif dig "$host" >/dev/null 2>&1; then
        ip_addr=$(dig +short "$host" 2>/dev/null | head -1)
        echo -e "${GREEN}✓${NC} DNS resolution successful (using dig)"
        if [ "$VERBOSE" = true ] && [ -n "$ip_addr" ]; then
            echo "  Resolved to: $ip_addr"
        fi
        return 0
    else
        echo -e "${RED}✗${NC} DNS resolution failed"
        return 1
    fi
}

test_http() {
    local host="$1"
    echo -e "${YELLOW}Testing HTTP connectivity to $host...${NC}"
    
    if command -v curl >/dev/null 2>&1; then
        if curl -Is --connect-timeout 10 "http://$host" >/dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} HTTP connectivity successful"
            return 0
        elif curl -Is --connect-timeout 10 "https://$host" >/dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} HTTPS connectivity successful"
            return 0
        else
            echo -e "${RED}✗${NC} HTTP/HTTPS connectivity failed"
            return 1
        fi
    elif command -v wget >/dev/null 2>&1; then
        if wget --spider --timeout=10 "http://$host" >/dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} HTTP connectivity successful"
            return 0
        elif wget --spider --timeout=10 "https://$host" >/dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} HTTPS connectivity successful"
            return 0
        else
            echo -e "${RED}✗${NC} HTTP/HTTPS connectivity failed"
            return 1
        fi
    else
        echo -e "${YELLOW}⚠${NC} HTTP test skipped (curl/wget not available)"
        return 0
    fi
}

test_speed() {
    echo -e "${YELLOW}Testing internet speed...${NC}"
    
    if command -v speedtest-cli >/dev/null 2>&1; then
        speedtest-cli --simple 2>/dev/null || echo -e "${RED}✗${NC} Speed test failed"
    else
        echo -e "${YELLOW}⚠${NC} Speed test skipped (speedtest-cli not installed)"
        echo "  Install with: pip install speedtest-cli"
    fi
}

show_network_info() {
    echo -e "${BLUE}======================================${NC}"
    echo -e "${BLUE}         NETWORK STATUS${NC}"
    echo -e "${BLUE}======================================${NC}"
    echo
    
    # Show active network interfaces
    echo -e "${YELLOW}Active Network Interfaces:${NC}"
    if command -v ip >/dev/null 2>&1; then
        ip addr show | grep -E '^[0-9]+:' | awk '{print "  " $2}' | tr -d ':'
    elif command -v ifconfig >/dev/null 2>&1; then
        ifconfig | grep -E '^[a-zA-Z0-9]+:' | awk '{print "  " $1}' | tr -d ':'
    fi
    echo
    
    # Show default gateway
    echo -e "${YELLOW}Default Gateway:${NC}"
    if command -v ip >/dev/null 2>&1; then
        gateway=$(ip route | grep default | awk '{print $3}' | head -1)
        [ -n "$gateway" ] && echo "  $gateway" || echo "  Not found"
    elif command -v route >/dev/null 2>&1; then
        gateway=$(route -n | grep '^0.0.0.0' | awk '{print $2}' | head -1)
        [ -n "$gateway" ] && echo "  $gateway" || echo "  Not found"
    fi
    echo
}

# Main execution
if [ "$PING_ONLY" = false ] && [ "$DNS_ONLY" = false ]; then
    show_network_info
fi

echo -e "${YELLOW}Testing connectivity to: $HOST${NC}"
echo

success=true

if [ "$DNS_ONLY" = false ]; then
    if ! test_ping "$HOST"; then
        success=false
    fi
    echo
fi

if [ "$PING_ONLY" = false ]; then
    if ! test_dns "$HOST"; then
        success=false
    fi
    echo
    
    if ! test_http "$HOST"; then
        success=false
    fi
    echo
fi

if [ "$SPEED_TEST" = true ]; then
    test_speed
    echo
fi

# Final result
if [ "$success" = true ]; then
    echo -e "${GREEN}✓ Network connectivity test passed${NC}"
    exit 0
else
    echo -e "${RED}✗ Network connectivity test failed${NC}"
    exit 1
fi