#!/bin/bash

# Development Environment Setup Script
# Sets up common development tools and configurations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 [OPTIONS] [PROFILE]"
    echo "Setup development environment with common tools"
    echo
    echo "Arguments:"
    echo "  PROFILE      Development profile to setup (default: basic)"
    echo "               Options: basic, web, python, node, go, full"
    echo
    echo "Options:"
    echo "  -u, --update     Update existing tools"
    echo "  -l, --list       List available profiles"
    echo "  -v, --verbose    Show detailed output"
    echo "  -h, --help       Show this help message"
    echo
    echo "Profiles:"
    echo "  basic   - Git, curl, wget, essential tools"
    echo "  web     - Basic + web development tools"
    echo "  python  - Basic + Python development tools"
    echo "  node    - Basic + Node.js development tools"
    echo "  go      - Basic + Go development tools"
    echo "  full    - All available development tools"
}

UPDATE=false
VERBOSE=false
PROFILE="basic"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--update)
            UPDATE=true
            shift
            ;;
        -l|--list)
            usage
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            PROFILE="$1"
            shift
            ;;
    esac
done

log() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[INFO]${NC} $1"
    fi
}

check_command() {
    local cmd="$1"
    if command -v "$cmd" >/dev/null 2>&1; then
        echo -e "${GREEN}✓${NC} $cmd is available"
        return 0
    else
        echo -e "${RED}✗${NC} $cmd is not available"
        return 1
    fi
}

install_package() {
    local package="$1"
    local description="$2"
    
    log "Installing $description..."
    
    if command -v apt-get >/dev/null 2>&1; then
        sudo apt-get update -qq && sudo apt-get install -y "$package"
    elif command -v yum >/dev/null 2>&1; then
        sudo yum install -y "$package"
    elif command -v dnf >/dev/null 2>&1; then
        sudo dnf install -y "$package"
    elif command -v brew >/dev/null 2>&1; then
        brew install "$package"
    else
        echo -e "${YELLOW}⚠${NC} Package manager not found. Please install $description manually."
        return 1
    fi
}

setup_git_config() {
    echo -e "${YELLOW}Setting up Git configuration...${NC}"
    
    if ! git config --global user.name >/dev/null 2>&1; then
        echo -n "Enter your Git username: "
        read -r git_username
        git config --global user.name "$git_username"
    fi
    
    if ! git config --global user.email >/dev/null 2>&1; then
        echo -n "Enter your Git email: "
        read -r git_email
        git config --global user.email "$git_email"
    fi
    
    # Set up useful Git aliases
    git config --global alias.st status
    git config --global alias.co checkout
    git config --global alias.br branch
    git config --global alias.ci commit
    git config --global alias.unstage 'reset HEAD --'
    git config --global alias.last 'log -1 HEAD'
    git config --global alias.visual '!gitk'
    
    echo -e "${GREEN}✓${NC} Git configuration completed"
}

setup_basic() {
    echo -e "${YELLOW}Setting up basic development tools...${NC}"
    
    # Essential tools
    local tools=("git" "curl" "wget" "vim" "nano" "htop" "tree" "unzip")
    
    for tool in "${tools[@]}"; do
        if ! check_command "$tool"; then
            if [ "$tool" = "htop" ] && command -v apt-get >/dev/null 2>&1; then
                install_package "htop" "htop process monitor"
            elif [ "$tool" = "tree" ]; then
                install_package "tree" "tree directory listing"
            else
                install_package "$tool" "$tool"
            fi
        fi
    done
    
    setup_git_config
}

setup_web() {
    echo -e "${YELLOW}Setting up web development tools...${NC}"
    
    setup_basic
    
    # Install Node.js if not present
    if ! check_command "node"; then
        if command -v curl >/dev/null 2>&1; then
            echo -e "${YELLOW}Installing Node.js...${NC}"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            install_package "nodejs" "Node.js runtime"
        fi
    fi
    
    # Check for yarn
    if ! check_command "yarn"; then
        if command -v npm >/dev/null 2>&1; then
            sudo npm install -g yarn
        fi
    fi
}

setup_python() {
    echo -e "${YELLOW}Setting up Python development tools...${NC}"
    
    setup_basic
    
    # Python tools
    local python_tools=("python3" "python3-pip" "python3-venv")
    
    for tool in "${python_tools[@]}"; do
        if [ "$tool" = "python3" ] && ! check_command "python3"; then
            install_package "python3" "Python 3"
        elif [ "$tool" = "python3-pip" ] && ! check_command "pip3"; then
            install_package "python3-pip" "Python package manager"
        elif [ "$tool" = "python3-venv" ]; then
            install_package "python3-venv" "Python virtual environment"
        fi
    done
    
    # Install common Python packages
    if command -v pip3 >/dev/null 2>&1; then
        echo -e "${YELLOW}Installing common Python packages...${NC}"
        pip3 install --user virtualenv requests pytest black flake8
    fi
}

setup_node() {
    echo -e "${YELLOW}Setting up Node.js development tools...${NC}"
    
    setup_basic
    
    # Install Node.js
    if ! check_command "node"; then
        install_package "nodejs" "Node.js runtime"
        install_package "npm" "Node package manager"
    fi
    
    # Install global packages
    if command -v npm >/dev/null 2>&1; then
        echo -e "${YELLOW}Installing global Node.js packages...${NC}"
        sudo npm install -g yarn eslint prettier nodemon create-react-app @vue/cli
    fi
}

setup_go() {
    echo -e "${YELLOW}Setting up Go development tools...${NC}"
    
    setup_basic
    
    if ! check_command "go"; then
        install_package "golang-go" "Go programming language"
        
        # Set up Go environment
        if [ ! -d "$HOME/go" ]; then
            mkdir -p "$HOME/go"/{bin,src,pkg}
        fi
        
        echo 'export GOPATH=$HOME/go' >> ~/.bashrc
        echo 'export PATH=$PATH:$GOPATH/bin' >> ~/.bashrc
    fi
}

setup_full() {
    echo -e "${YELLOW}Setting up full development environment...${NC}"
    
    setup_python
    setup_node
    setup_go
    
    # Additional tools
    local extra_tools=("docker" "docker-compose" "terraform" "kubectl")
    
    for tool in "${extra_tools[@]}"; do
        if ! check_command "$tool"; then
            echo -e "${YELLOW}⚠${NC} $tool not installed (requires manual installation)"
        fi
    done
}

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}    DEVELOPMENT ENVIRONMENT SETUP${NC}"
echo -e "${BLUE}======================================${NC}"
echo

echo -e "${YELLOW}Profile:${NC} $PROFILE"
echo -e "${YELLOW}Update mode:${NC} $UPDATE"
echo

case $PROFILE in
    basic)
        setup_basic
        ;;
    web)
        setup_web
        ;;
    python)
        setup_python
        ;;
    node)
        setup_node
        ;;
    go)
        setup_go
        ;;
    full)
        setup_full
        ;;
    *)
        echo -e "${RED}Error: Unknown profile '$PROFILE'${NC}"
        usage
        exit 1
        ;;
esac

echo
echo -e "${GREEN}Development environment setup completed!${NC}"
echo -e "${BLUE}Note: You may need to restart your shell or run 'source ~/.bashrc' to use new tools.${NC}"
echo -e "${BLUE}======================================${NC}"