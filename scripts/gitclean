#!/bin/bash

# Git Repository Cleaner
# Clean up Git repositories and optimize them

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 [OPTIONS] [DIRECTORY]"
    echo "Clean up and optimize Git repositories"
    echo
    echo "Arguments:"
    echo "  DIRECTORY    Git repository directory (default: current directory)"
    echo
    echo "Options:"
    echo "  -a, --aggressive  Aggressive cleanup (includes reflog expiration)"
    echo "  -d, --dry-run     Show what would be cleaned without doing it"
    echo "  -v, --verbose     Show detailed output"
    echo "  -h, --help        Show this help message"
    echo
    echo "Actions performed:"
    echo "  - Remove untracked files and directories"
    echo "  - Clean up merged branches"
    echo "  - Garbage collect and optimize repository"
    echo "  - Prune remote tracking branches"
    echo "  - (Aggressive) Expire reflog and repack"
}

AGGRESSIVE=false
DRY_RUN=false
VERBOSE=false
DIRECTORY="."

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -a|--aggressive)
            AGGRESSIVE=true
            shift
            ;;
        -d|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            DIRECTORY="$1"
            shift
            ;;
    esac
done

if [ ! -d "$DIRECTORY" ]; then
    echo -e "${RED}Error: Directory '$DIRECTORY' does not exist${NC}"
    exit 1
fi

cd "$DIRECTORY"

if [ ! -d ".git" ]; then
    echo -e "${RED}Error: '$DIRECTORY' is not a Git repository${NC}"
    exit 1
fi

log() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[INFO]${NC} $1"
    fi
}

run_git_command() {
    local cmd="$1"
    local desc="$2"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${YELLOW}[DRY RUN]${NC} Would run: git $cmd"
        return 0
    fi
    
    log "$desc"
    if git $cmd 2>/dev/null; then
        echo -e "${GREEN}✓${NC} $desc"
        return 0
    else
        echo -e "${RED}✗${NC} Failed: $desc"
        return 1
    fi
}

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}         GIT REPOSITORY CLEANER${NC}"
echo -e "${BLUE}======================================${NC}"
echo

if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}DRY RUN MODE - No changes will be made${NC}"
    echo
fi

# Show repository info
echo -e "${YELLOW}Repository:${NC} $(pwd)"
echo -e "${YELLOW}Current branch:${NC} $(git branch --show-current 2>/dev/null || echo 'unknown')"
echo

# Check repository status
if [ "$VERBOSE" = true ]; then
    echo -e "${YELLOW}Repository status:${NC}"
    git --no-pager status --porcelain | head -10
    echo
fi

# Clean untracked files
echo -e "${YELLOW}Cleaning untracked files...${NC}"
if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}[DRY RUN]${NC} Untracked files that would be removed:"
    git clean -ndX 2>/dev/null || true
    git clean -nd 2>/dev/null || true
else
    run_git_command "clean -fdX" "Remove ignored files"
    run_git_command "clean -fd" "Remove untracked files and directories"
fi

echo

# Prune remote tracking branches
echo -e "${YELLOW}Pruning remote tracking branches...${NC}"
run_git_command "remote prune origin" "Prune remote tracking branches"
echo

# Clean up merged branches (except main/master/develop)
echo -e "${YELLOW}Cleaning up merged branches...${NC}"
if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}[DRY RUN]${NC} Merged branches that would be deleted:"
    git branch --merged | grep -v -E '(main|master|develop|\*)' | sed 's/^/  /' || echo "  No merged branches to delete"
else
    merged_branches=$(git branch --merged | grep -v -E '(main|master|develop|\*)' | tr -d ' ')
    if [ -n "$merged_branches" ]; then
        echo "$merged_branches" | while read -r branch; do
            if [ -n "$branch" ]; then
                run_git_command "branch -d $branch" "Delete merged branch: $branch"
            fi
        done
    else
        echo -e "${GREEN}✓${NC} No merged branches to delete"
    fi
fi
echo

# Garbage collection and optimization
echo -e "${YELLOW}Optimizing repository...${NC}"
run_git_command "gc --auto" "Automatic garbage collection"

if [ "$AGGRESSIVE" = true ]; then
    echo
    echo -e "${YELLOW}Performing aggressive cleanup...${NC}"
    run_git_command "reflog expire --expire=now --all" "Expire reflog entries"
    run_git_command "gc --aggressive --prune=now" "Aggressive garbage collection"
    run_git_command "repack -ad" "Repack repository"
fi

echo

# Show repository size information
echo -e "${YELLOW}Repository size information:${NC}"
if command -v du >/dev/null 2>&1; then
    repo_size=$(du -sh .git 2>/dev/null | cut -f1)
    total_size=$(du -sh . 2>/dev/null | cut -f1)
    echo "  .git directory: $repo_size"
    echo "  Total repository: $total_size"
fi

# Show object count
if [ "$VERBOSE" = true ]; then
    echo
    echo -e "${YELLOW}Object information:${NC}"
    git count-objects -v 2>/dev/null | sed 's/^/  /' || echo "  Unable to get object count"
fi

echo
echo -e "${GREEN}Git repository cleanup completed!${NC}"
echo -e "${BLUE}======================================${NC}"