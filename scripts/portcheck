#!/bin/bash

# Port Checker Script
# Check if specific ports are open on local or remote hosts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 [OPTIONS] PORT [HOST]"
    echo "Check if specific ports are open"
    echo
    echo "Arguments:"
    echo "  PORT         Port number to check"
    echo "  HOST         Host to check (default: localhost)"
    echo
    echo "Options:"
    echo "  -r, --range START-END  Check a range of ports"
    echo "  -t, --timeout SECONDS  Connection timeout (default: 5)"
    echo "  -v, --verbose          Show detailed output"
    echo "  -h, --help             Show this help message"
    echo
    echo "Examples:"
    echo "  $0 80                    # Check if port 80 is open on localhost"
    echo "  $0 22 github.com         # Check SSH port on github.com"
    echo "  $0 -r 20-25 ftp.server.com  # Check ports 20-25 on FTP server"
    echo "  $0 -t 10 443 google.com  # Check HTTPS with 10s timeout"
}

PORT=""
HOST="localhost"
RANGE=""
TIMEOUT=5
VERBOSE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -r|--range)
            RANGE="$2"
            shift 2
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            if [ -z "$PORT" ] && [ -z "$RANGE" ]; then
                PORT="$1"
            elif [ -z "$HOST" ] || [ "$HOST" = "localhost" ]; then
                HOST="$1"
            else
                echo "Too many arguments"
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

if [ -z "$PORT" ] && [ -z "$RANGE" ]; then
    echo -e "${RED}Error: PORT or --range is required${NC}"
    usage
    exit 1
fi

log() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[INFO]${NC} $1"
    fi
}

check_port() {
    local host="$1"
    local port="$2"
    local timeout="$3"
    
    log "Checking port $port on $host (timeout: ${timeout}s)"
    
    # Try different methods to check port
    if command -v nc >/dev/null 2>&1; then
        # Use netcat if available
        if nc -z -w "$timeout" "$host" "$port" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Port $port is open on $host"
            return 0
        else
            echo -e "${RED}✗${NC} Port $port is closed on $host"
            return 1
        fi
    elif command -v telnet >/dev/null 2>&1; then
        # Use telnet as fallback
        if echo "quit" | timeout "$timeout" telnet "$host" "$port" 2>/dev/null | grep -q "Connected"; then
            echo -e "${GREEN}✓${NC} Port $port is open on $host"
            return 0
        else
            echo -e "${RED}✗${NC} Port $port is closed on $host"
            return 1
        fi
    elif command -v bash >/dev/null 2>&1; then
        # Use bash built-in as last resort
        if timeout "$timeout" bash -c "echo >/dev/tcp/$host/$port" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Port $port is open on $host"
            return 0
        else
            echo -e "${RED}✗${NC} Port $port is closed on $host"
            return 1
        fi
    else
        echo -e "${YELLOW}⚠${NC} No suitable tool found to check port $port"
        return 2
    fi
}

get_service_name() {
    local port="$1"
    
    case $port in
        20|21) echo "FTP" ;;
        22) echo "SSH" ;;
        23) echo "Telnet" ;;
        25) echo "SMTP" ;;
        53) echo "DNS" ;;
        80) echo "HTTP" ;;
        110) echo "POP3" ;;
        143) echo "IMAP" ;;
        443) echo "HTTPS" ;;
        993) echo "IMAPS" ;;
        995) echo "POP3S" ;;
        3306) echo "MySQL" ;;
        5432) echo "PostgreSQL" ;;
        6379) echo "Redis" ;;
        27017) echo "MongoDB" ;;
        *) echo "" ;;
    esac
}

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}         PORT CHECKER${NC}"
echo -e "${BLUE}======================================${NC}"
echo

if [ -n "$RANGE" ]; then
    # Parse range
    if [[ "$RANGE" =~ ^([0-9]+)-([0-9]+)$ ]]; then
        start_port="${BASH_REMATCH[1]}"
        end_port="${BASH_REMATCH[2]}"
        
        if [ "$start_port" -gt "$end_port" ]; then
            echo -e "${RED}Error: Invalid range - start port must be less than end port${NC}"
            exit 1
        fi
        
        echo -e "${YELLOW}Checking ports $start_port-$end_port on $HOST...${NC}"
        echo
        
        open_ports=0
        total_ports=$((end_port - start_port + 1))
        
        for ((port=start_port; port<=end_port; port++)); do
            if check_port "$HOST" "$port" "$TIMEOUT"; then
                service=$(get_service_name "$port")
                if [ -n "$service" ]; then
                    echo "  Service: $service"
                fi
                ((open_ports++))
            fi
        done
        
        echo
        echo -e "${BLUE}Summary:${NC}"
        echo "  Open ports: $open_ports/$total_ports"
        echo "  Host: $HOST"
        echo "  Port range: $start_port-$end_port"
        
    else
        echo -e "${RED}Error: Invalid range format. Use START-END (e.g., 20-25)${NC}"
        exit 1
    fi
else
    # Single port check
    echo -e "${YELLOW}Checking port $PORT on $HOST...${NC}"
    echo
    
    if check_port "$HOST" "$PORT" "$TIMEOUT"; then
        service=$(get_service_name "$PORT")
        if [ -n "$service" ]; then
            echo "  Service: $service"
        fi
        
        # Show additional info for verbose mode
        if [ "$VERBOSE" = true ]; then
            echo
            echo -e "${BLUE}Additional Information:${NC}"
            
            # Try to get more details about the service
            if [ "$HOST" = "localhost" ] || [ "$HOST" = "127.0.0.1" ]; then
                if command -v ss >/dev/null 2>&1; then
                    echo "  Local process info:"
                    ss -tulpn | grep ":$PORT " | head -3 | sed 's/^/    /'
                elif command -v netstat >/dev/null 2>&1; then
                    echo "  Local process info:"
                    netstat -tulpn | grep ":$PORT " | head -3 | sed 's/^/    /'
                fi
            fi
        fi
        
        exit 0
    else
        exit 1
    fi
fi

echo -e "${BLUE}======================================${NC}"